######################
# ALL IN ONE COMPOSE #
######################

## This compose file will bring up both Core and Periphery in containers.
## A "default" server pointing to the local Periphery will be waiting in the UI on first startup.

services:
  monitor-core:
    image: ghcr.io/mbecker20/monitor:latest ## use ghcr.io/mbecker20/monitor:latest-aarch64 for arm support
    restart: unless-stopped
    depends_on:
      - monitor-mongo
    logging:
      driver: local # enable log rotation by default. see `https://docs.docker.com/config/containers/logging/local/`
    networks:
      - monitor-network
    ports:
      - 9120:9120
    environment: # https://github.com/mbecker20/monitor/blob/main/config_example/core.config.example.toml
      MONITOR_HOST: https://demo.monitor.dev # CHANGEME
      MONITOR_TITLE: Monitor # Change the app title, displayed in the browser tab.
      MONITOR_ENSURE_SERVER: http://monitor-periphery:8120 # Created the "default" server.
      ## MONGO
      MONITOR_MONGO_ADDRESS: monitor-mongo:27017
      MONITOR_MONGO_USERNAME: admin # match db credentials ones below
      MONITOR_MONGO_PASSWORD: admin
      ## KEYS
      MONITOR_PASSKEY: a_random_passkey # used to auth against periphery
      MONITOR_WEBHOOK_SECRET: a_random_secret # used to authenticate incoming webhooks
      MONITOR_JWT_SECRET: a_random_jwt_secret # Optional. If empty, will have to log in again on restart.
      ## AUTH
      MONITOR_LOCAL_AUTH: true # the default is false.
      # MONITOR_GITHUB_OAUTH_ENABLED: true # also support google oauth
      # MONITOR_GITHUB_OAUTH_ID: your_oauth_id
      # MONITOR_GITHUB_OAUTH_SECRET: your_oauth_secret
      ## AWS
      # MONITOR_AWS_ACCESS_KEY_ID: your_aws_key_id
      # MONITOR_AWS_SECRET_ACCESS_KEY: your_secret_access_key
      ## HETZNER
      # MONITOR_HETZNER_TOKEN: your_hetzner_token

  ## Deploy periphery container using this block,
  ## or deploy it on the host directly using https://github.com/mbecker20/monitor/tree/main/scripts
  monitor-periphery:
    image: ghcr.io/mbecker20/periphery:latest # use ghcr.io/mbecker20/periphery:latest-aarch64 for arm support
    logging:
      driver: local
    networks:
      - monitor-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - monitor-repos:/etc/monitor/repos # manage repos in a docker volume, or change it to an accessible host directory.
    # environment:
    #   # If the disk size is overreporting, can use one of these to
    #   # whitelist / blacklist the disks to filter them, whichever is easier.
    #   PERIPHERY_INCLUDE_DISK_MOUNTS: /etc/monitor/repos
    #   PERIPHERY_EXCLUDE_DISK_MOUNTS: /snap

  monitor-mongo:
    image: mongo
    command: --quiet # suppress mongo logs a bit
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - monitor-network
    ports:
      - 27017:27017
    volumes:
      - db-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin # change these
      MONGO_INITDB_ROOT_PASSWORD: admin

volumes:
  db-data:
  monitor-repos:

networks:
  monitor-network: {}
